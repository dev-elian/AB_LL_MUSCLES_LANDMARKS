//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/InputActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @InputActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Generals"",
            ""id"": ""ea9fe4ff-7ddc-4e3c-a3fb-d799399d88b9"",
            ""actions"": [
                {
                    ""name"": ""LeftGrip"",
                    ""type"": ""Button"",
                    ""id"": ""0d8e50f5-6fef-482d-a52a-098dd8010988"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightGrip"",
                    ""type"": ""Button"",
                    ""id"": ""30ae484b-5105-479a-bb7e-d37f9b4e821c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryButtonLeft"",
                    ""type"": ""Button"",
                    ""id"": ""2afde089-ac07-4398-a73c-74ad6f6f708a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""db900cd2-9d41-4884-941e-1d81896ac127"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftGrip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""232d841c-2385-4f58-9e49-0443548e2e64"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightGrip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05f62c82-f63f-42a0-b3d2-e86722bfb6be"",
                    ""path"": ""<XRController>{LeftHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryButtonLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Generals
        m_Generals = asset.FindActionMap("Generals", throwIfNotFound: true);
        m_Generals_LeftGrip = m_Generals.FindAction("LeftGrip", throwIfNotFound: true);
        m_Generals_RightGrip = m_Generals.FindAction("RightGrip", throwIfNotFound: true);
        m_Generals_SecondaryButtonLeft = m_Generals.FindAction("SecondaryButtonLeft", throwIfNotFound: true);
    }

    ~@InputActions()
    {
        UnityEngine.Debug.Assert(!m_Generals.enabled, "This will cause a leak and performance issues, InputActions.Generals.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Generals
    private readonly InputActionMap m_Generals;
    private List<IGeneralsActions> m_GeneralsActionsCallbackInterfaces = new List<IGeneralsActions>();
    private readonly InputAction m_Generals_LeftGrip;
    private readonly InputAction m_Generals_RightGrip;
    private readonly InputAction m_Generals_SecondaryButtonLeft;
    /// <summary>
    /// Provides access to input actions defined in input action map "Generals".
    /// </summary>
    public struct GeneralsActions
    {
        private @InputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public GeneralsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Generals/LeftGrip".
        /// </summary>
        public InputAction @LeftGrip => m_Wrapper.m_Generals_LeftGrip;
        /// <summary>
        /// Provides access to the underlying input action "Generals/RightGrip".
        /// </summary>
        public InputAction @RightGrip => m_Wrapper.m_Generals_RightGrip;
        /// <summary>
        /// Provides access to the underlying input action "Generals/SecondaryButtonLeft".
        /// </summary>
        public InputAction @SecondaryButtonLeft => m_Wrapper.m_Generals_SecondaryButtonLeft;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Generals; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="GeneralsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(GeneralsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="GeneralsActions" />
        public void AddCallbacks(IGeneralsActions instance)
        {
            if (instance == null || m_Wrapper.m_GeneralsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GeneralsActionsCallbackInterfaces.Add(instance);
            @LeftGrip.started += instance.OnLeftGrip;
            @LeftGrip.performed += instance.OnLeftGrip;
            @LeftGrip.canceled += instance.OnLeftGrip;
            @RightGrip.started += instance.OnRightGrip;
            @RightGrip.performed += instance.OnRightGrip;
            @RightGrip.canceled += instance.OnRightGrip;
            @SecondaryButtonLeft.started += instance.OnSecondaryButtonLeft;
            @SecondaryButtonLeft.performed += instance.OnSecondaryButtonLeft;
            @SecondaryButtonLeft.canceled += instance.OnSecondaryButtonLeft;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="GeneralsActions" />
        private void UnregisterCallbacks(IGeneralsActions instance)
        {
            @LeftGrip.started -= instance.OnLeftGrip;
            @LeftGrip.performed -= instance.OnLeftGrip;
            @LeftGrip.canceled -= instance.OnLeftGrip;
            @RightGrip.started -= instance.OnRightGrip;
            @RightGrip.performed -= instance.OnRightGrip;
            @RightGrip.canceled -= instance.OnRightGrip;
            @SecondaryButtonLeft.started -= instance.OnSecondaryButtonLeft;
            @SecondaryButtonLeft.performed -= instance.OnSecondaryButtonLeft;
            @SecondaryButtonLeft.canceled -= instance.OnSecondaryButtonLeft;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="GeneralsActions.UnregisterCallbacks(IGeneralsActions)" />.
        /// </summary>
        /// <seealso cref="GeneralsActions.UnregisterCallbacks(IGeneralsActions)" />
        public void RemoveCallbacks(IGeneralsActions instance)
        {
            if (m_Wrapper.m_GeneralsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="GeneralsActions.AddCallbacks(IGeneralsActions)" />
        /// <seealso cref="GeneralsActions.RemoveCallbacks(IGeneralsActions)" />
        /// <seealso cref="GeneralsActions.UnregisterCallbacks(IGeneralsActions)" />
        public void SetCallbacks(IGeneralsActions instance)
        {
            foreach (var item in m_Wrapper.m_GeneralsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GeneralsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="GeneralsActions" /> instance referencing this action map.
    /// </summary>
    public GeneralsActions @Generals => new GeneralsActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Generals" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="GeneralsActions.AddCallbacks(IGeneralsActions)" />
    /// <seealso cref="GeneralsActions.RemoveCallbacks(IGeneralsActions)" />
    public interface IGeneralsActions
    {
        /// <summary>
        /// Method invoked when associated input action "LeftGrip" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftGrip(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightGrip" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightGrip(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SecondaryButtonLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondaryButtonLeft(InputAction.CallbackContext context);
    }
}
